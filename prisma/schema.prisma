// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(operator)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

 

  tasks           Task[]           @relation("AssignedTo")
  assignedTasks   Task[]           @relation("AssignedBy")
  tanks           Tank[]           @relation("TankUpdatedBy")
  generators      Generator[]      @relation("GeneratorUpdatedBy")
  alerts          Alert[]          @relation("AlertAcknowledgedBy")
  historicalData  HistoricalData[] @relation("HistoricalDataRecordedBy")
  activityLogs    ActivityLog[]    @relation("ActivityLogUser")

  @@map("users")
}


// prisma/schema.prisma
model WeeklyTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  assignedTo  String[] // یا می‌توانید یک رابطه جداگانه ایجاد کنید
  dayOfWeek   Int      // 0-6 (شنبه تا جمعه)
  timeSlot    String   // مثال: "09:00"
  priority    String   // low, medium, high, critical
  recurring   Boolean  @default(false)
  status      String   // pending, in_progress, completed, cancelled
  type        String   // maintenance, fuel, water, generator, other
  equipment   String?
  duration    Int?
  dueDate     DateTime?
  completedBy String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("weekly_tasks")
}

enum Role {
  root
  manager
  operator
  supervisor
}

model Tank {
  id            String   @id @default(uuid())
  name          String
  type          TankType
  capacity      Int
  currentLevel  Float   @default(0)
  percentage    Float?  // اضافه کردن فیلد percentage
  location      String?
  isActive      Boolean @default(true)
  updatedBy     String
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [updatedBy], references: [id], name: "TankUpdatedBy")
  alerts        Alert[]  @relation("TankAlerts")
  historicalData HistoricalData[] @relation("TankHistoricalData")
  
  @@map("tanks")
}


enum TankType {
  fuel
  water
}

model Generator {
  id          String   @id @default(uuid())
  name        String
  capacity    Int      @default(900)
  currentLevel Float   @default(0)
  status      GeneratorStatus 
  location    String?
  isActive    Boolean  @default(true)
  updatedBy   String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [updatedBy], references: [id], name: "GeneratorUpdatedBy")
  alerts      Alert[]  @relation("GeneratorAlerts")
  historicalData HistoricalData[] @relation("GeneratorHistoricalData")
  
  @@map("generators")
}

enum GeneratorStatus {
  running
  stopped
  maintenance
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  assignedTo  String
  assignedBy  String
  status      TaskStatus  @default(pending)
  priority    Priority    @default(medium)
  dueDate     DateTime?
  completedAt DateTime?
  checklist   Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  assignedToUser User     @relation("AssignedTo", fields: [assignedTo], references: [id])
  assignedByUser User     @relation("AssignedBy", fields: [assignedBy], references: [id])
  
  @@map("tasks")
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

enum Priority {
  low
  medium
  high
  critical
}

model Alert {
  id            String    @id @default(uuid())
  type          AlertType
  message       String
  severity      Severity
  tankId        String?
  generatorId   String?
  acknowledged  Boolean   @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  createdAt     DateTime  @default(now())
  
  // Relations
  tank          Tank?     @relation(fields: [tankId], references: [id], name: "TankAlerts")
  generator     Generator? @relation(fields: [generatorId], references: [id], name: "GeneratorAlerts")
  user          User?     @relation(fields: [acknowledgedBy], references: [id], name: "AlertAcknowledgedBy")
  
  @@map("alerts")
}

enum AlertType {
  low_fuel
  low_water
  maintenance
  critical
}

enum Severity {
  low
  medium
  high
  critical
}

model HistoricalData {
  id           String   @id @default(uuid())
  entityType   EntityType
  tankId       String? 
  generatorId  String?  
  levelValue   Float
  recordedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [recordedBy], references: [id], name: "HistoricalDataRecordedBy")
  tank         Tank?    @relation(fields: [tankId], references: [id], name: "TankHistoricalData")
  generator    Generator? @relation(fields: [generatorId], references: [id], name: "GeneratorHistoricalData")
  
  @@map("historical_data")
  @@index([entityType, tankId])
  @@index([entityType, generatorId])
  @@index([createdAt])
}


enum EntityType {
  tank
  generator
}

model ActivityLog {
  id          String   @id @default(uuid())
  type        String
  description String
  userId      String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], name: "ActivityLogUser")
  
  @@map("activity_logs")
  @@index([createdAt])
  @@index([type])
}